@startuml classD

class TexturSheetRender{
    +Draw(Vector2, string)
    +Draw(Vector2,Vector2,Vector2,Vector2,string)
    -string imgKey 
}

class ObjectManager{
    +void Update(void)
    +void Draw(void)
    -TexturSheetRender TexturSheetRender_
}

ObjectManager -- TexturSheetRender

class Object{
    +void Update(void)
    +void Draw(void)
    +Component GetComponent(ComponentID)
    +void AddComponent(Component)
    +Component RemoveComponent(ComponentID)
}

ObjectManager -- Object

class Dx12{

}



abstract class Component{
    +void Update(void){abstract}
    +void Update(void){abstract}
    +void Begin(void){abstract}
    +void End(void){abstract}
    #Object owner_
}

Object -- Component

abstract class Collider{
    
}

Component <|-- Collider

class CircleCollider{
    -float r_
}

Collider <|-- CircleCollider

abstract class ObjRender{
    +void Draw()
}


Component <|-- ObjRender

class Animator{

}

class DefaltRender{

}

ObjRender <|-- DefaltRender

ObjRender <|-- Animator

abstract class ObjectBehavior{
}

Component <|-- ObjectBehavior

class PlayerBehavior{

}

ObjectBehavior <|-- PlayerBehavior
PlayerBehavior -- BulletFactory

class RenderTarget{
    -Resource rt_
    -Resource srv_
    -Resource screenMat_
}

class EnemyBehavior
{
    
}

ObjectBehavior <|-- EnemyBehavior

class EnemyFactory
{

}

EnemyBehavior -- EnemyFactory
EnemyBehavior -- BulletFactory

class EnemyMove
{

}

EnemyBehavior <|-- EnemyMove

class EnemyMoveToPos
{

}

EnemyBehavior <|-- EnemyMoveToPos

class NormalBulletBehavior
{

}


NormalBulletBehavior -- BulletFactory
ObjectBehavior <|-- NormalBulletBehavior

class BulletFactory
{

}

class EffectBehavior
{

}
ObjectBehavior <|-- EffectBehavior

class EffectFactory
{

}

PlayerBehavior -- EffectFactory
EnemyBehavior -- EffectFactory
NormalBulletBehavior -- EffectFactory

abstract class Resource{
    +ID3D12DescriptorHeap& DescriptorHeap(void)
    +ComPtr<ID3D12Resource>& GetResource(void)
    -bool CreateView(Dx12Wrapper&){abstract}
    -bool CreateResource(Dx12Wrapper&,D3D12_RESOURCE_DESC&){abstract}
    -bool CreateDescriptorHeap(Dx12Wrapper&)
    -ComPtr<ID3D12Resource> resourse_
    -ComPtr<ID3D12DescriptorHeap> descriptorHeap_ 
}

abstract class ConstantResource<T>{
    +void Update(void){abstract}
    #T*
    #size_t size_
}

Resource <|-- ConstantResource

class CbValue<T>{
    +T val_
}

ConstantResource <|-- CbValue

class CbMatrix{
    
}

class transform{
    -Matrix3X3 mat_
    -Matrix3X3* mappedMat_
}

Resource <|-- transform

class Textur{
}

Resource <|-- Textur


class Mesh{
    -vector<Vertex> vert_
    -D3D12_VERTEX_BUFFER_VIEW vbView_
    ComPtr<ID3D12Resource> vb_;
}

Material *-- Mesh

class Material{
    -Render& render_
    -Mesh mesh
    -pair<Resource&,int> shaderPair_    
}



class Render{
    
}

@enduml